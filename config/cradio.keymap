#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"

#define ___ &trans

#define DEF 0
#define NAV 1
#define NUM 2
#define GER 3

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

/* Timeless homerow mods */

// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

/*
 * Layer Tap Settings
 */
&lt {
    // Increase layer tap time
    tapping-term-ms = <300>;

    // Quickly tap-tap-holding the lt button will repeat the tap behavior
    // For example enter-enter-hold, will output multiple enter while you
    // keep holding the key.
    // But holding enter without double tapping, will activate the layer.
     quick-tap-ms = <200>;

     flavor = "balanced";
};

/*
 * Sticky Key Settings
 */
&sk {
    // Deactivate shift on press of next key instead of on release
    // to prevent capitalization of multiple characters when rolling
    // keys (such as `ST`).
    quick-release;
};

/*
 * Caps Word Settings
 */
&caps_word {
    // Allow caps word to continue even when minus or underscore
    // are pressed.
    // Also prevent mod presses from cancelling caps word.
    continue-list = <
      UNDERSCORE MINUS
      LCTRL LALT LGUI LSHFT
      RCTRL RALT RGUI RSHFT
      BACKSPACE
    >;
    #ifdef HAS_UROB
        /delete-property/ ignore-modifiers;
    #endif
};

#ifdef HAS_CAPSLOCK
    &caps_word_capslock {
        disable-on-keys = <
            SPACE TAB ENTER ESCAPE
            COMMA DOT SEMI COLON QUESTION EXCLAMATION
            SLASH BACKSLASH SINGLE_QUOTE DOUBLE_QUOTES GRAVE
            LPAR RPAR LBKT RBKT LBRC RBRC LT GT
        >;
    };
#endif

#ifdef HAS_UROB
    &num_word {
        layers = <NUM_WORD>;
        continue-list = <
            BACKSPACE DELETE DOT COMMA
            SLASH ASTERISK PLUS MINUS EQUAL DOLLAR
            RS(SPACE)
        >;
        ignore-modifiers;  // modifiers don't deactivate the layer
    };
#endif

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <0 4 20 24>;
        };

        kp_double_quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <19 18>;
            layers = <4>;
        };

        kp_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <8 9>;
            layers = <4>;
        };

        bt_clr {
            bindings = <&bt BT_CLR>;
            key-positions = <4 31 30 3>;
        };

        bt_clr_all {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <4 31 30 2>;
        };

        bt_0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <4 31 30 20>;
        };

        bt_1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <4 31 30 21>;
        };

        bt_2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <4 31 30 22>;
        };
    };

    macros {
        vi_pm_down: vi_pm_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(J)>;
            label = "VI_PM_DOWN";
        };

        vi_pm_up: vi_pm_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(K)>;
            label = "VI_PM_UP";
        };

        vi_pm_left: vi_pm_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(H)>;
            label = "VI_PM_LEFT";
        };

        vi_pm_right: vi_pm_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(L)>;
            label = "VI_PM_RIGHT";
        };

        vi_switch_window: vi_switch_window {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp LC(W) &kp W>;
            label = "VI_SWITCH_WINDOW";
        };

        tmux_leader: tmux_switcher {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A)>;
            label = "TMUX_SWITCHER";
        };
    };

    behaviors {
        multi_quotes: multi_quotes {
            compatible = "zmk,behavior-tap-dance";
            label = "MULTI_QUOTES";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };

        multi_dash: multi_dash {
            compatible = "zmk,behavior-tap-dance";
            label = "MULTI_DASH";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
        };

        shift_tap: shift_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.

        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };


        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            // hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        colemak_dh {
            bindings = <
&kp Q                    &kp W  &kp F           &kp P               &kp B          &kp J        &kp L                &kp U      &kp Y    &kp SEMICOLON
&hm_l LEFT_SHIFT A       &kp R  &kp S           &mt LEFT_COMMAND T  &kp G          &kp M        &mt RIGHT_COMMAND N  &kp E      &kp I    &shift_tap RIGHT_SHIFT O
&lt 4 Z                  &kp X  &mt LEFT_ALT C  &kp D               &kp V          &kp K        &kp H                &kp COMMA  &kp DOT  &lt 3 SLASH
                                                &mt LCTRL ESCAPE    &lt 2 ENTER    &lt 1 SPACE  &kp BACKSPACE
            >;
        };

        navigation {
            bindings = <
&none  &kp F7  &kp F8  &kp F9  &kp F10    &vi_switch_window  &kp PAGE_UP  &kp UP_ARROW  &kp PAGE_DOWN  &none
&none  &kp F4  &kp F5  &kp F6  &kp F11    &none              &kp LEFT     &kp DOWN      &kp RIGHT      &kp RIGHT_SHIFT
&none  &kp F1  &kp F2  &kp F3  &kp F12    &tmux_leader       &none        &none         &none          &trans
                       &trans  &trans     &trans             &trans
            >;
        };

        numeric {
            bindings = <
&kp N6  &kp N7  &kp N8  &kp N9  &kp DOT    &none   &none      &kp LC(K)  &none      &none
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5     &none   &kp LC(H)  &kp LC(J)  &kp LC(L)  &none
&kp N0  &none   &none   &none   &none      &none   &none      &none      &none      &none
                        &trans  &trans     &trans  &trans
            >;
        };

        left_symbol {
            bindings = <
&kp AT_SIGN      &kp HASH  &kp DOLLAR  &kp PERCENT  &kp CARET    &none         &none   &none  &none  &none
&kp EXCLAMATION  &none     &none       &none        &none        &none         &none   &none  &none  &none
&kp GRAVE        &none     &none       &none        &none        &tmux_leader  &none   &none  &none  &trans
                                       &trans       &trans       &trans        &trans
            >;
        };

        right_symbol {
            bindings = <
&none           &none  &none  &none   &none     &kp AMPERSAND  &kp ASTERISK  &kp LPAR          &kp RPAR           &multi_dash
&kp LEFT_SHIFT  &none  &none  &none   &none     &kp BACKSLASH  &none         &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &multi_quotes
&none           &none  &none  &none   &none     &none          &none         &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp EQUAL
                              &trans  &trans    &trans         &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp C_BRIGHTNESS_INC  &trans  &kp C_VOLUME_UP    &kp C_NEXT        &kp LA(LG(SPACE))
&trans  &trans  &trans  &trans  &trans    &kp C_BRIGHTNESS_DEC  &trans  &kp C_VOLUME_DOWN  &kp C_PREVIOUS    &trans
&trans  &trans  &trans  &trans  &trans    &trans                &trans  &kp C_MUTE         &kp C_PLAY_PAUSE  &trans
                        &trans  &trans    &trans                &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        function_layer {
            if-layers = <1 2>;
            then-layer = <5>;
        };
    };
};
