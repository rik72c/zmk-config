#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
            layers = <0>;
        };

        system_layer {
            bindings = <&mo 5>;
            key-positions = <30 31 32 33>;
        };

        alt+tab {
            bindings = <&kp LG(TAB)>;
            key-positions = <1 2>;
            layers = <4>;
        };

        alt+shift+tab {
            bindings = <&kp LG(LS(TAB))>;
            key-positions = <11 12>;
            layers = <4>;
        };

        ctrl+tab {
            bindings = <&kp LC(TAB)>;
            key-positions = <2 3>;
            layers = <4>;
        };

        ctrl+shift+tab {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <12 13>;
            layers = <4>;
        };

        kp_enter {
            bindings = <&kp KP_ENTER>;
            key-positions = <1 2>;
            layers = <1>;
        };

        kp_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <11 12>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak_dh {
            bindings = <
&kp Q             &kp W       &kp F        &kp P         &kp B          &kp J      &kp L            &kp U        &kp Y            &kp SEMI
&mt LEFT_SHIFT A  &mt LALT R  &mt LCTRL S  &mt LGUI T    &kp G          &kp M      &mt RGUI N       &mt RCTRL E  &mt RIGHT_ALT I  &mt RIGHT_SHIFT O
&kp Z             &kp X       &kp C        &kp D         &kp V          &kp K      &kp H            &kp COMMA    &kp DOT          &kp FSLH
                                           &lt 1 ESCAPE  &lt 4 ENTER    &kp SPACE  &lt 0 BACKSPACE
            >;
        };

        numeric {
            bindings = <
&kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS    &trans    &trans    &trans  &trans     &trans
&kp KP_MULTIPLY  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS     &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT      &trans    &trans    &trans  &trans     &trans
                                                   &trans           &trans          &trans    &trans
            >;
        };

        symbols {
            bindings = <
&kp LEFT_BRACE        &kp RIGHT_BRACE        &kp GRAVE      &trans            &trans           &trans     &kp PLUS    &kp CARET    &kp ASTERISK  &kp EQUAL
&kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS      &kp UNDERSCORE    &kp PIPE         &kp TILDE  &kp DOLLAR  &kp AT_SIGN  &kp PERCENT   &kp AMPERSAND
&kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LESS_THAN  &kp GREATER_THAN  &kp BACKSLASH    &trans     &trans      &trans       &trans        &trans
                                                            &trans            &trans           &trans     &trans
            >;
        };

        function {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5     &kp F6   &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &kp F11    &kp F12  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans     &trans   &trans  &trans  &trans  &trans
                        &trans  &trans     &trans   &trans
            >;
        };

        navigation {
            bindings = <
&trans  &kp PAGE_DOWN  &kp UP    &kp PAGE_UP  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT       &kp DOWN  &kp RIGHT    &trans    &trans  &trans  &trans  &trans  &trans
&trans  &kp END        &trans    &kp HOME     &trans    &trans  &trans  &trans  &trans  &trans
                                 &trans       &trans    &trans  &trans
            >;
        };

        system {
            bindings = <
&sys_reset   &trans  &trans  &trans      &trans    &bt BT_SEL 0  &trans  &trans  &trans  &trans
&bootloader  &trans  &trans  &trans      &trans    &trans        &trans  &trans  &trans  &trans
&trans       &trans  &trans  &bt BT_CLR  &trans    &trans        &trans  &trans  &trans  &trans
                             &trans      &trans    &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        function_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
