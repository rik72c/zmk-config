#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Timeless homerow mods */
// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

&lt {
    tapping-term-ms = <90>;
    flavor = "balanced";
    retro-tap;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <0 4 20 24>;
        };

        kp_double_quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <19 18>;
            layers = <4>;
        };

        kp_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <8 9>;
            layers = <4>;
        };
    };

    behaviors {
        ht_mod: ht_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <0>;
            flavor = "tap-preferred";
            retro-tap;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak_dh {
            bindings = <
&kp Q                 &kp W  &kp F               &kp P               &kp B          &kp J        &kp L                &kp U      &kp Y    &kp SEMICOLON
&ht_mod LEFT_SHIFT A  &kp R  &kp S               &mt LEFT_COMMAND T  &kp G          &kp M        &mt RIGHT_COMMAND N  &kp E      &kp I    &ht_mod RIGHT_SHIFT O
&lt 4 Z               &kp X  &ht_mod LEFT_ALT C  &kp D               &kp V          &kp K        &kp H                &kp COMMA  &kp DOT  &lt 3 SLASH
                                                 &mt LCTRL ESCAPE    &lt 2 ENTER    &lt 1 SPACE  &kp BACKSPACE
            >;
        };

        navigation {
            bindings = <
&kp GLOBE  &kp F7  &kp F8  &kp F9  &kp F10    &none   &kp PAGE_UP  &kp UP_ARROW  &kp PAGE_DOWN  &none
&none      &kp F4  &kp F5  &kp F6  &kp F11    &none   &kp LEFT     &kp DOWN      &kp RIGHT      &kp RIGHT_SHIFT
&none      &kp F1  &kp F2  &kp F3  &kp F12    &none   &none        &none         &none          &trans
                           &trans  &trans     &trans  &trans
            >;
        };

        numeric {
            bindings = <
&none      &none      &kp LC(K)  &none      &none     &none   &kp N7  &kp N8  &kp N9  &none
&kp LC(A)  &kp LC(H)  &kp LC(J)  &kp LC(L)  &none     &none   &kp N4  &kp N5  &kp N6  &none
&none      &none      &none      &none      &none     &kp N0  &kp N1  &kp N2  &kp N3  &kp DOT
                                 &trans     &trans    &trans  &trans
            >;
        };

        left_symbol {
            bindings = <
&kp EXCLAMATION  &kp HASH  &kp DOLLAR  &kp PERCENT  &kp CARET    &none   &none   &none  &none  &none
&kp AT_SIGN      &none     &none       &none        &none        &none   &none   &none  &none  &none
&kp GRAVE        &none     &none       &none        &none        &none   &none   &none  &none  &trans
                                       &trans       &trans       &trans  &trans
            >;
        };

        right_symbol {
            bindings = <
&none  &none           &none  &none   &none     &kp AMPERSAND  &kp ASTERISK  &kp LPAR          &kp RPAR           &kp MINUS
&none  &none           &none  &none   &none     &kp BACKSLASH  &none         &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SQT
&none  &kp LEFT_SHIFT  &none  &none   &none     &none          &none         &none             &none              &kp EQUAL
                              &trans  &trans    &trans         &trans
            >;
        };

        functions {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp C_BRIGHTNESS_INC  &trans  &kp C_VOLUME_UP    &kp C_NEXT        &kp LA(LG(SPACE))
&trans  &trans  &trans  &trans  &trans    &kp C_BRIGHTNESS_DEC  &trans  &kp C_VOLUME_DOWN  &kp C_PREVIOUS    &trans
&trans  &trans  &trans  &trans  &trans    &trans                &trans  &kp C_MUTE         &kp C_PLAY_PAUSE  &trans
                        &trans  &trans    &trans                &trans
            >;
        };

        system {
            bindings = <
&trans        &trans        &bt BT_CLR_ALL  &bt BT_CLR    &trans          &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans          &trans        &trans          &trans  &trans  &trans  &trans  &trans
                                            &trans        &trans          &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        function_layer {
            if-layers = <1 2>;
            then-layer = <5>;
        };

        system_layer {
            if-layers = <2 4>;
            then-layer = <6>;
        };
    };
};
