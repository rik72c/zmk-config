#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <0 4 20 24>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <30 33>;
        };
    };

    macros {
        vi_pm_down: vi_pm_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp J>;
            label = "VI_PM_DOWN";
        };

        vi_pm_up: vi_pm_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp K>;
            label = "VI_PM_UP";
        };

        vi_pm_left: vi_pm_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp H>;
            label = "VI_PM_LEFT";
        };

        vi_pm_right: vi_pm_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp L>;
            label = "VI_PM_RIGHT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak_dh {
            bindings = <
&kp Q             &kp W       &kp F  &kp P        &kp B        &kp J      &kp L            &kp U      &kp Y            &kp SEMI
&mt LEFT_SHIFT A  &mt LALT R  &kp S  &mt LGUI T   &kp G        &kp M      &mt RGUI N       &kp E      &mt RIGHT_ALT I  &mt RIGHT_SHIFT O
&kp Z             &kp X       &kp C  &mt LCTRL D  &kp V        &kp K      &mt RCTRL H      &kp COMMA  &kp DOT          &kp FSLH
                                     &lt 2 TAB    &kp ENTER    &kp SPACE  &lt 1 BACKSPACE
            >;
        };

        numeric {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &none        &kp LC(D)    &kp LC(U)     &kp LC(O)     &kp LC(I)
&kp N6        &kp N7        &kp N8        &kp N9        &kp N0    &kp LEFT     &kp DOWN     &kp UP_ARROW  &kp RIGHT     &kp RIGHT_SHIFT
&none         &none         &none         &trans        &none     &vi_pm_left  &vi_pm_down  &vi_pm_up     &vi_pm_right  &trans
                                          &trans        &trans    &trans       &trans
            >;
        };

        symbols {
            bindings = <
&kp LEFT_BRACE        &kp LESS_THAN   &kp GREATER_THAN   &kp RIGHT_BRACE        &none     &kp CARET     &kp AT_SIGN      &kp HASH          &kp AMPERSAND  &kp TILDE
&kp LEFT_PARENTHESIS  &kp UNDERSCORE  &kp DOUBLE_QUOTES  &kp RIGHT_PARENTHESIS  &none     &kp PLUS      &kp DOLLAR       &kp SINGLE_QUOTE  &kp MINUS      &kp EQUAL
&kp LEFT_BRACKET      &kp BACKSLASH   &kp PIPE           &kp RIGHT_BRACKET      &none     &kp ASTERISK  &kp EXCLAMATION  &kp GRAVE         &kp PERCENT    &kp SLASH
                                                         &trans                 &trans    &trans        &trans
            >;
        };

        function {
            bindings = <
&kp F1          &kp F2  &kp F3  &kp F4  &kp F5        &kp F6        &kp F7        &kp F8        &kp F9        &kp F10
&none           &none   &none   &none   &kp F11       &kp F12       &none         &none         &none         &none
&bt BT_CLR_ALL  &none   &none   &none   &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
                                &none   &none         &none         &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        function_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
